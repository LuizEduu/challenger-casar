services:
  nginx:
    image: nginx:latest
    container_name: nginx-thoughts
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - nodejs1
      - nodejs2
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  nodejs1:
    build: .
    container_name: nodejs1
    volumes:
      - .:/home/node/app
    networks:
      - app_network
    environment:
      - DATABASE_URL=postgresql://docker:docker@postgres:5432/thoughts?schema=public
    depends_on:
      postgres:
        condition: service_healthy  # aguarda até que o postgres esteja saudável
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # Verificar a saúde do nodejs1
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  nodejs2:
    build: .
    container_name: nodejs2
    volumes:
      - .:/home/node/app
    depends_on:
      postgres:
        condition: service_healthy  # O nodejs2 aguarda até que o postgres esteja saudável
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # Verificar a saúde do nodejs2
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - app_network
    environment:
      - DATABASE_URL=postgresql://docker:docker@postgres:5432/thoughts?schema=public  # Passando DATABASE_URL

  postgres:
    image: postgres:latest
    container_name: postgres-thoughts
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: thoughts
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "docker", "-d", "thoughts", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: